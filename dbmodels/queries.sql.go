// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package dbmodels

import (
	"context"
)

const createLinuxUser = `-- name: CreateLinuxUser :one
INSERT INTO public.linux_user (
linux_user_name, linux_distro
) VALUES (
  $1, $2
)
RETURNING linux_user_id, linux_user_name, linux_distro
`

type CreateLinuxUserParams struct {
	LinuxUserName string `db:"linux_user_name" json:"linuxUserName"`
	LinuxDistro   string `db:"linux_distro" json:"linuxDistro"`
}

func (q *Queries) CreateLinuxUser(ctx context.Context, arg CreateLinuxUserParams) (LinuxUser, error) {
	row := q.db.QueryRow(ctx, createLinuxUser, arg.LinuxUserName, arg.LinuxDistro)
	var i LinuxUser
	err := row.Scan(&i.LinuxUserID, &i.LinuxUserName, &i.LinuxDistro)
	return i, err
}

const deleteLinuxUser = `-- name: DeleteLinuxUser :exec
DELETE FROM public.linux_user 
WHERE linux_user_id = $1
`

func (q *Queries) DeleteLinuxUser(ctx context.Context, linuxUserID int64) error {
	_, err := q.db.Exec(ctx, deleteLinuxUser, linuxUserID)
	return err
}

const getLinuxDistro = `-- name: GetLinuxDistro :one
SELECT linux_distro FROM public.linux_distro
where linux_distro = $1
limit 1
`

func (q *Queries) GetLinuxDistro(ctx context.Context, linuxDistro string) (string, error) {
	row := q.db.QueryRow(ctx, getLinuxDistro, linuxDistro)
	var linux_distro string
	err := row.Scan(&linux_distro)
	return linux_distro, err
}

const getLinuxDistroCount = `-- name: GetLinuxDistroCount :many
select linux_distro, count(*) from linux_user group by linux_distro order by count(*)
`

type GetLinuxDistroCountRow struct {
	LinuxDistro string `db:"linux_distro" json:"linuxDistro"`
	Count       int64  `db:"count" json:"count"`
}

func (q *Queries) GetLinuxDistroCount(ctx context.Context) ([]GetLinuxDistroCountRow, error) {
	rows, err := q.db.Query(ctx, getLinuxDistroCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLinuxDistroCountRow
	for rows.Next() {
		var i GetLinuxDistroCountRow
		if err := rows.Scan(&i.LinuxDistro, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinuxDistros = `-- name: GetLinuxDistros :many
SELECT linux_distro FROM public.linux_distro
order by linux_distro
`

func (q *Queries) GetLinuxDistros(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getLinuxDistros)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var linux_distro string
		if err := rows.Scan(&linux_distro); err != nil {
			return nil, err
		}
		items = append(items, linux_distro)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinuxUser = `-- name: GetLinuxUser :one
SELECT linux_user_id, linux_user_name, linux_distro from public.linux_user 
 where linux_user_id = $1
LIMIT 1
`

func (q *Queries) GetLinuxUser(ctx context.Context, linuxUserID int64) (LinuxUser, error) {
	row := q.db.QueryRow(ctx, getLinuxUser, linuxUserID)
	var i LinuxUser
	err := row.Scan(&i.LinuxUserID, &i.LinuxUserName, &i.LinuxDistro)
	return i, err
}

const getLinuxUsers = `-- name: GetLinuxUsers :many
SELECT linux_user_id, linux_user_name, linux_distro FROM public.linux_user 
order by linux_user_name
`

func (q *Queries) GetLinuxUsers(ctx context.Context) ([]LinuxUser, error) {
	rows, err := q.db.Query(ctx, getLinuxUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LinuxUser
	for rows.Next() {
		var i LinuxUser
		if err := rows.Scan(&i.LinuxUserID, &i.LinuxUserName, &i.LinuxDistro); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLinuxUser = `-- name: UpdateLinuxUser :exec
UPDATE public.linux_user 
  set 
      linux_user_name = $2, 
      linux_distro = $3
WHERE linux_user_id  = $1
`

type UpdateLinuxUserParams struct {
	LinuxUserID   int64  `db:"linux_user_id" json:"linuxUserID"`
	LinuxUserName string `db:"linux_user_name" json:"linuxUserName"`
	LinuxDistro   string `db:"linux_distro" json:"linuxDistro"`
}

func (q *Queries) UpdateLinuxUser(ctx context.Context, arg UpdateLinuxUserParams) error {
	_, err := q.db.Exec(ctx, updateLinuxUser, arg.LinuxUserID, arg.LinuxUserName, arg.LinuxDistro)
	return err
}
